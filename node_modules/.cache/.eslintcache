[{"D:\\Self-study\\React\\selection-test-react\\src\\index.js":"1","D:\\Self-study\\React\\selection-test-react\\src\\App.js":"2","D:\\Self-study\\React\\selection-test-react\\src\\reportWebVitals.js":"3","D:\\Self-study\\React\\selection-test-react\\src\\pages\\list-all-parks-fed-duck\\list-parks.jsx":"4","D:\\Self-study\\React\\selection-test-react\\src\\pages\\info-fed-duck-in-park\\fed-duck.jsx":"5","D:\\Self-study\\React\\selection-test-react\\src\\components\\park\\park.jsx":"6","D:\\Self-study\\React\\selection-test-react\\src\\components\\form-input-for-duck-fed\\inputForm.jsx":"7"},{"size":560,"mtime":1618872976435,"results":"8","hashOfConfig":"9"},{"size":506,"mtime":1618904443682,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":5611,"mtime":1618944985209,"results":"12","hashOfConfig":"9"},{"size":617,"mtime":1618945329937,"results":"13","hashOfConfig":"9"},{"size":1362,"mtime":1618944494716,"results":"14","hashOfConfig":"9"},{"size":6615,"mtime":1618949743428,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"13z96cn",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Self-study\\React\\selection-test-react\\src\\index.js",[],["32","33"],"D:\\Self-study\\React\\selection-test-react\\src\\App.js",[],"D:\\Self-study\\React\\selection-test-react\\src\\reportWebVitals.js",[],"D:\\Self-study\\React\\selection-test-react\\src\\pages\\list-all-parks-fed-duck\\list-parks.jsx",["34","35"],"import React,{useState, useEffect} from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Park from '../../components/park/park';\r\nimport Col from 'react-bootstrap/Col';\r\nimport axios from \"axios\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Link} from 'react-router-dom';\r\nexport default function ListParks() {\r\n      const [ parks, setParks] = useState([]);\r\n\r\n      const [loading, setLoading] = useState(true)\r\n\r\n      useEffect(() => {\r\n            const fetch_data_from_DB = async ()=>{\r\n            let result = await axios.get('/allParks');\r\n\r\n                  // ! set state for array Parks\r\n                  setParks(result.data)\r\n                  setLoading(false)\r\n            }\r\n\r\n            fetch_data_from_DB();\r\n\r\n      },[])\r\n\r\n      // ! split array parks into chunk of 4\r\n      const chunk = (arr, size) => arr.reduce((acc, e, i) => (i % size ? acc[acc.length - 1].push(e) : acc.push([e]), acc), []);\r\n\r\n      const arrangedArray = chunk(parks,4)\r\n\r\n\r\n      // ! render park in browser\r\n      // const renderParks = arrangedArray.map((eachRow,indx) => {\r\n      //       console.log(\"ðŸš€ ~ file: list-parks.jsx ~ line 34 ~ renderParks ~ eachRow\", eachRow)\r\n\r\n      //       let renderEachParks = eachRow.map((eachPark,index) => {\r\n      //                               <Col key = {index}>\r\n      //                                     <Park\r\n      //                                           location = {eachPark.location}\r\n      //                                           numberDucks = {eachPark.number_of_duck}\r\n      //                                           time={eachPark.time_fed}\r\n      //                                           numberFoods = {eachPark.number_of_food}\r\n      //                                           food = {eachPark.food}\r\n\r\n      //                                     />\r\n      //                               </Col>\r\n      //                         })\r\n      //       return(\r\n      //             <Row key = {indx}>\r\n      //                   <h1>Inside row </h1>\r\n      //                   {\r\n      //                        renderEachParks\r\n      //                   }\r\n      //             </Row>\r\n      //             )\r\n\r\n      // })\r\n      console.log(parks);\r\n      const renderParks = parks.map((eachPark,indx) => {\r\n            return(\r\n                        <Col key = {indx} className=\"p-3\">\r\n                                          <Park\r\n                                                location = {eachPark.location}\r\n                                                numberDucks = {eachPark.number_of_duck}\r\n                                                time={eachPark.time_fed}\r\n                                                numberFoods = {eachPark.number_of_food}\r\n                                                food = {eachPark.food}\r\n                                          />\r\n                        </Col>\r\n                  )\r\n\r\n      })\r\n\r\n\r\n\r\n      return (\r\n            <Container >\r\n                  <Row className=\"d-flex justify-content-center\">\r\n                              <h1>\r\n                               All parks that fed ducks list below\r\n                              </h1>\r\n\r\n                  </Row>\r\n                  <Row className=\"d-flex justify-content-center\">\r\n                        <Link to=\"/infoDuckFed\" style={{textDecoration: \"none\"}}>\r\n                              <Button variant=\"info\">Add new Park</Button>\r\n                        </Link>\r\n                  </Row>\r\n                  <Row>\r\n\r\n                        {loading\r\n                        ? (\r\n                              <Container>\r\n                                    <h3>Please wait .. !</h3>\r\n                                    <Spinner animation=\"grow\" variant=\"primary\" />\r\n                                    <Spinner animation=\"grow\" variant=\"secondary\" />\r\n                                    <Spinner animation=\"grow\" variant=\"success\" />\r\n                                    <Spinner animation=\"grow\" variant=\"danger\" />\r\n                                    <Spinner animation=\"grow\" variant=\"warning\" />\r\n                                    <Spinner animation=\"grow\" variant=\"info\" />\r\n                                    <Spinner animation=\"grow\" variant=\"light\" />\r\n                                    <Spinner animation=\"grow\" variant=\"dark\" />\r\n                              </Container>\r\n\r\n                        )\r\n                        : (\r\n                              // <Row>\r\n                              //       <Col  xs={12} md={3}>\r\n                              //             <Park/>\r\n                              //       </Col>\r\n                              //       <Col xs={12} md={3}>\r\n                              //             <Park/>\r\n                              //       </Col>\r\n                              //       <Col xs={12} md={3}>\r\n                              //             <Park/>\r\n                              //       </Col>\r\n\r\n                              //       <Col xs={12} md={3}>\r\n                              //             <Park/>\r\n                              //       </Col>\r\n\r\n                              // </Row>\r\n                              <Row className = \"d-flex flex-row justify-content-around\">\r\n                                     {renderParks}\r\n                              </Row>\r\n\r\n\r\n\r\n\r\n                        )}\r\n                  </Row>\r\n\r\n\r\n\r\n\r\n            </Container>\r\n      )\r\n}\r\n","D:\\Self-study\\React\\selection-test-react\\src\\pages\\info-fed-duck-in-park\\fed-duck.jsx",[],"D:\\Self-study\\React\\selection-test-react\\src\\components\\park\\park.jsx",[],"D:\\Self-study\\React\\selection-test-react\\src\\components\\form-input-for-duck-fed\\inputForm.jsx",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":29,"column":117,"nodeType":"42","messageId":"43","endLine":29,"endColumn":118},{"ruleId":"44","severity":1,"message":"45","line":31,"column":13,"nodeType":"46","messageId":"47","endLine":31,"endColumn":26},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'arrangedArray' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]